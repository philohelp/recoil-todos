{"version":3,"sources":["recoil_todo.js","index.js"],"names":["uuid","require","todoListState","atom","key","default","todoListFilterState","filteredTodoListState","selector","get","filter","list","item","isComplete","todoListStatsState","todoList","totalNum","length","totalCompletedNum","totalUncompletedNum","percentCompleted","useRecoilValue","style","margin","maxWidth","marginBottom","TodoListFilters","TodoItemCreator","map","todoItem","id","TodoItem","marginTop","TodoListStats","useState","inputValue","setinputValue","setTodoList","useSetRecoilState","display","type","value","onChange","target","onClick","oldTodoList","text","useRecoilState","index","findIndex","listItem","checked","newList","replaceItemAtIndex","arr","slice","removeItemAtIndex","setFilter","formattedPercentCompleted","Math","round","newValue","App","state","name","Component","render","document","getElementById"],"mappings":"sPAQQA,EAASC,EAAQ,IAAjBD,KAEO,aACb,IAAME,EAAgBC,eAAK,CACzBC,IAAK,gBACLC,QAAS,KAGLC,EAAsBH,eAAK,CAC/BC,IAAK,sBACLC,QAAS,aAGLE,EAAwBC,mBAAS,CACrCJ,IAAK,wBACLK,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAC,EAASD,EAAIH,GACbK,EAAOF,EAAIP,GAEjB,OAAQQ,GACN,IAAK,iBACH,OAAOC,EAAKD,QAAO,SAACE,GAAD,OAAUA,EAAKC,cACpC,IAAK,mBACH,OAAOF,EAAKD,QAAO,SAACE,GAAD,OAAWA,EAAKC,cACrC,QACE,OAAOF,MAKTG,EAAqBN,mBAAS,CAClCJ,IAAK,qBACLK,IAAK,YAAc,IACXM,GAAWN,EADD,EAAVA,KACeF,GACfS,EAAWD,EAASE,OACpBC,EAAoBH,EAASL,QAAO,SAACE,GAAD,OAAUA,EAAKC,cACtDI,OAKH,MAAO,CACLD,WACAE,oBACAC,oBAP0BH,EAAWE,EAQrCE,iBANa,IAAbJ,EAAiB,EAAIE,EAAoBF,MAWzCD,EAAWM,yBAAed,GAEhC,OACE,yBAAKe,MAAO,CAAEC,OAAQ,GAAIC,SAAU,MAClC,yBAAKF,MAAO,CAAEG,aAAc,KAC1B,kBAACC,EAAD,OAEF,yBAAKJ,MAAO,CAAEG,aAAc,KAC1B,kBAACE,EAAD,OAGDZ,EAASa,KAAI,SAACC,GAAD,OACZ,yBAAKzB,IAAKyB,EAASC,IACjB,kBAACC,EAAD,CAAUnB,KAAMiB,QAGpB,yBAAKP,MAAO,CAAEU,UAAW,KACvB,kBAACC,EAAD,QAKN,SAASN,IAAmB,IAAD,EACWO,mBAAS,IADpB,mBAClBC,EADkB,KACNC,EADM,KAEnBC,EAAcC,4BAAkBpC,GAiBtC,OACE,yBAAKoB,MAAO,CAAEiB,QAAS,SACrB,2BACEC,KAAK,OACLC,MAAON,EACPO,SATW,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MAC5BL,EAAcK,MAUZ,4BAAQG,QAtBI,WACdP,GAAY,SAACQ,GAAD,4BACPA,GADO,CAEV,CACEf,GAAI9B,IACJ8C,KAAMX,EACNtB,YAAY,UAgBd,QAON,SAASkB,EAAT,GAA6B,IAATnB,EAAQ,EAARA,KAAQ,EACMmC,yBAAe7C,GADrB,mBACnBa,EADmB,KACTsB,EADS,KAEpBW,EAAQjC,EAASkC,WAAU,SAACC,GAAD,OAAcA,IAAatC,KA0B5D,OACE,yBAAKU,MAAO,CAAEiB,QAAS,SACrB,6BACE,2BACEC,KAAK,WACLW,QAASvC,EAAKC,WACd6B,SArBqB,WAC3B,IAAMU,EAAUC,EAAmBtC,EAAUiC,EAAX,YAAC,eAC9BpC,GAD6B,IAEhCC,YAAaD,EAAKC,cAGpBwB,EAAYe,MAiBR,2BAAOZ,KAAK,OAAOC,MAAO7B,EAAKkC,KAAMJ,SAhCtB,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MAC1BW,EAAUC,EAAmBtC,EAAUiC,EAAX,YAAC,eAC9BpC,GAD6B,IAEhCkC,KAAML,KAGRJ,EAAYe,MA2BR,4BAAQR,QAfK,WACjB,IAAMQ,EA+DV,SAA2BE,EAAKN,GAE9B,MAAM,GAAN,mBAAWM,EAAIC,MAAM,EAAGP,IAAxB,YAAmCM,EAAIC,MAAMP,EAAQ,KAjEnCQ,CAAkBzC,EAAUiC,GAE5CX,EAAYe,KAYR,OAMR,SAAS1B,IAAmB,IAAD,EACGqB,yBAAezC,GADlB,mBAClBI,EADkB,KACV+C,EADU,KAOzB,OACE,oCACE,4BAAQhB,MAAO/B,EAAQgC,SANN,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MAChCgB,EAAUhB,KAMN,4BAAQA,MAAM,YAAd,OACA,4BAAQA,MAAM,kBAAd,aACA,4BAAQA,MAAM,oBAAd,iBAMR,SAASR,IAAiB,IAAD,EAMnBZ,yBAAeP,GAJjBE,EAFqB,EAErBA,SACAE,EAHqB,EAGrBA,kBACAC,EAJqB,EAIrBA,oBACAC,EALqB,EAKrBA,iBAGIsC,EAA4BC,KAAKC,MAAyB,IAAnBxC,GAE7C,OACE,4BACE,4CAAkBJ,GAClB,gDAAsBE,GACtB,oDAA0BC,GAC1B,kDAAwBuC,IAK9B,SAASL,EAAmBC,EAAKN,EAAOa,GAEtC,MAAM,GAAN,mBAAWP,EAAIC,MAAM,EAAGP,IAAxB,CAAgCa,GAAhC,YAA6CP,EAAIC,MAAMP,EAAQ,OC9L7Dc,G,wDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,KAAM,SAHI,E,qDAQZ,OACE,kBAAC,aAAD,KACC,kBAAC,EAAD,W,GAXWC,cAiBlBC,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ad924bad.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n} from \"recoil\";\nconst { uuid } = require(\"uuidv4\");\n\nexport default () => {\n  const todoListState = atom({\n    key: \"todoListState\",\n    default: [],\n  });\n\n  const todoListFilterState = atom({\n    key: \"todoListFilterState\",\n    default: \"Show All\",\n  });\n\n  const filteredTodoListState = selector({\n    key: \"filteredTodoListState\",\n    get: ({ get }) => {\n      const filter = get(todoListFilterState);\n      const list = get(todoListState);\n\n      switch (filter) {\n        case \"Show Completed\":\n          return list.filter((item) => item.isComplete);\n        case \"Show Uncompleted\":\n          return list.filter((item) => !item.isComplete);\n        default:\n          return list;\n      }\n    },\n  });\n\n  const todoListStatsState = selector({\n    key: \"todoListStatsState\",\n    get: ({ get }) => {\n      const todoList = get(filteredTodoListState);\n      const totalNum = todoList.length;\n      const totalCompletedNum = todoList.filter((item) => item.isComplete)\n        .length;\n      const totalUncompletedNum = totalNum - totalCompletedNum;\n      const percentCompleted =\n        totalNum === 0 ? 0 : totalCompletedNum / totalNum;\n\n      return {\n        totalNum,\n        totalCompletedNum,\n        totalUncompletedNum,\n        percentCompleted,\n      };\n    },\n  });\n\n  const todoList = useRecoilValue(filteredTodoListState);\n\n  return (\n    <div style={{ margin: 50, maxWidth: 600 }}>\n      <div style={{ marginBottom: 10 }}>\n        <TodoListFilters />\n      </div>\n      <div style={{ marginBottom: 10 }}>\n        <TodoItemCreator />\n      </div>\n\n      {todoList.map((todoItem) => (\n        <div key={todoItem.id}>\n          <TodoItem item={todoItem} />\n        </div>\n      ))}\n      <div style={{ marginTop: 50 }}>\n        <TodoListStats />\n      </div>\n    </div>\n  );\n\n  function TodoItemCreator() {\n    const [inputValue, setinputValue] = useState(\"\");\n    const setTodoList = useSetRecoilState(todoListState);\n\n    const addItem = () => {\n      setTodoList((oldTodoList) => [\n        ...oldTodoList,\n        {\n          id: uuid(),\n          text: inputValue,\n          isComplete: false,\n        },\n      ]);\n    };\n\n    const onChange = ({ target: { value } }) => {\n      setinputValue(value);\n    };\n\n    return (\n      <div style={{ display: \"flex\" }}>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={onChange}\n        />\n        <button onClick={addItem}>\n          Add\n        </button>\n      </div>\n    );\n  }\n\n  function TodoItem({ item }) {\n    const [todoList, setTodoList] = useRecoilState(todoListState);\n    const index = todoList.findIndex((listItem) => listItem === item);\n\n    const editItemText = ({ target: { value } }) => {\n      const newList = replaceItemAtIndex(todoList, index, {\n        ...item,\n        text: value,\n      });\n\n      setTodoList(newList);\n    };\n\n    const toggleItemCompletion = () => {\n      const newList = replaceItemAtIndex(todoList, index, {\n        ...item,\n        isComplete: !item.isComplete,\n      });\n\n      setTodoList(newList);\n    };\n\n    const deleteItem = () => {\n      const newList = removeItemAtIndex(todoList, index);\n\n      setTodoList(newList);\n    };\n\n    return (\n      <div style={{ display: \"flex\" }}>\n        <div>\n          <input\n            type=\"checkbox\"\n            checked={item.isComplete}\n            onChange={toggleItemCompletion}\n          />\n          <input type=\"text\" value={item.text} onChange={editItemText} />\n          <button onClick={deleteItem}>X</button>\n        </div>\n      </div>\n    );\n  }\n\n  function TodoListFilters() {\n    const [filter, setFilter] = useRecoilState(todoListFilterState);\n\n    const updateFilter = ({ target: { value } }) => {\n      setFilter(value);\n    };\n\n    return (\n      <>\n        <select value={filter} onChange={updateFilter}>\n          <option value=\"Show All\">All</option>\n          <option value=\"Show Completed\">Completed</option>\n          <option value=\"Show Uncompleted\">Uncompleted</option>\n        </select>\n      </>\n    );\n  }\n\n  function TodoListStats() {\n    const {\n      totalNum,\n      totalCompletedNum,\n      totalUncompletedNum,\n      percentCompleted,\n    } = useRecoilValue(todoListStatsState);\n\n    const formattedPercentCompleted = Math.round(percentCompleted * 100);\n\n    return (\n      <ul>\n        <li>Total items: {totalNum}</li>\n        <li>Items completed: {totalCompletedNum}</li>\n        <li>Items not completed: {totalUncompletedNum}</li>\n        <li>Percent completed: {formattedPercentCompleted}</li>\n      </ul>\n    );\n  }\n\n  function replaceItemAtIndex(arr, index, newValue) {\n    // Si index = 3, renvoie la partie jusqu'à 3, le nouvel item, la partie après 3+1 => 4\n    return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n  }\n\n  function removeItemAtIndex(arr, index) {\n    // renvoie la partie avant et la partie après.\n    return [...arr.slice(0, index), ...arr.slice(index + 1)];\n  }\n};\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport { RecoilRoot } from \"recoil\";\nimport Todo from './recoil_todo';\nimport './style.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: 'React'\n    };\n  }\n\n  render() {\n    return (\n      <RecoilRoot>\n       <Todo />\n      </RecoilRoot>\n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}